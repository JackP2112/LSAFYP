#!/usr/bin/env python

# A sample training component that trains a simple scikit-learn decision tree model.
# This implementation works in File mode and makes no assumptions about the input file names.
# Input is specified as CSV with a data point in each row and the labels in the first column.

from __future__ import print_function

import os
import json
import pickle
import sys
import traceback

import pandas as pd

from surprise import Reader
from surprise import Dataset
from surprise import NMF
from surprise import accuracy
from surprise.model_selection import PredefinedKFold

# These are the paths to where SageMaker mounts interesting things in your container.

prefix = '/opt/ml/'

input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
model_path = os.path.join(prefix, 'model')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')

# This algorithm has a single channel of input data called 'train'. Since we run in
# File mode, the input files are copied to the directory specified here.
train_channel_name='train'
training_path = os.path.join(input_path, train_channel_name)

valid_channel_name='validation'
validation_path = os.path.join(input_path, valid_channel_name)

# The function to execute the training.
def train():
    print('Starting the training.')
    try:
        # Read in any hyperparameters that the user passed with the training job
        with open(param_path, 'r') as tc:
            trainingParams = json.load(tc)

        # for predefined kfolds scikit surprise expects pairs of train and test csv files
        train_files = [ os.path.join(training_path, file) for file in os.listdir(training_path) ]
        valid_files = [ os.path.join(validation_path, file) for file in os.listdir(validation_path) ]
        
        train_test_files = list(zip(train_files, valid_files))

        # scikit surprise reader
        ## movielens train data is tab-separated csv with fields userID, itemID, rating(1-5)
        reader = Reader(line_format='user item rating', sep='\t', rating_scale=(1,5))
        data = Dataset.load_from_folds(train_test_files, reader)
        pkf = PredefinedKFold()
        (trainset, testset) = next(pkf.split(data))

        # scikit surprise svd
        clf = NMF()
        clf.fit(trainset)

        # metrics
        predictions = clf.test(testset)
        rmse = accuracy.rmse(predictions, verbose=False)
        print(f"MetricRMSE={rmse};")

        # save the model
        with open(os.path.join(model_path, 'nmf.pkl'), 'wb') as out:
            pickle.dump(clf, out)
        print('Training complete.')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc, file=sys.stderr)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)

if __name__ == '__main__':
    train()

    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
